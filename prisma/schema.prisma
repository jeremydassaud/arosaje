generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "psql"
  url      = "postgres://default:************@ep-proud-frost-a4v0rs6m.us-east-1.aws.neon.tech:5432/verceldb?sslmode=require"
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  userName      String?
  password      String
  imageSrc      String?
  plantsOwned   Plant[]    @relation("OwnedPlants")
  plantsGuarded Plant[]    @relation("GuardedPlants")
  address       Address[]
  userRole      UserRole[]
  comment       Comment[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model UserRole {
  id     Int   @id @default(autoincrement())
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
  Role   Role? @relation(fields: [roleId], references: [id])
  roleId Int?
}

model Role {
  id        Int        @id @default(autoincrement())
  content   String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userRole  UserRole[]
}

model Plant {
  id              Int       @id @default(autoincrement())
  common_name     String
  scientific_name String
  image_url       String
  ownerId         Int
  guardianId      Int?
  addressId       Int
  owner           User      @relation("OwnedPlants", fields: [ownerId], references: [id])
  guardian        User?     @relation("GuardedPlants", fields: [guardianId], references: [id])
  address         Address   @relation(fields: [addressId], references: [id])
  comment         Comment[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Address {
  id         Int      @id @default(autoincrement())
  number     Int
  street     String
  postalCode Int
  city       String
  country    String
  lat        Float
  lng        Float
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  plants     Plant[] // Relation pour représenter toutes les plantes associées à l'adresse
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  byteImage String
  plantId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  Plant     Plant    @relation(fields: [plantId], references: [id])
}
